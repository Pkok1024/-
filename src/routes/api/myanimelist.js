import e from"express";import t from"mal-scraper";import a from"../../middlewares/apiKeyMiddleware.js";const s=e.Router(),r=(e,t)=>{console.error(t),e.status(500).json({"error":"Internal ServerError"})};s.get("/search",a,(async(e,a)=>{try{const s=e.query.querystring,r=e.query.type||"anime",n=await t.getResultsFromSearch(s,r);a.json(n)}catch(e){r(a,e)}})),s.get("/season",a,(async(e,a)=>{const{"year":s,"season":n,"type":i}=e.query;try{const e=await t.getSeason(s,n,i);a.json(e)}catch(e){r(a,error)}})),s.get("/watchlist",a,(async(e,a)=>{let{"username":s,"after":n,"type":i,"status":o}=e.query;n=n?Math.max(0,Math.min(Number(n),300)):0,i="manga"===i?"manga":"anime",o=o?Math.max(0,Math.min(Number(o),7)):0,console.log(s);try{const e=await t.getWatchListFromUser(s,n,i,o);a.json(e)}catch(e){console.log(e),r(a,e)}})),s.get("/news",a,(async(e,a)=>{const s=e.query.nbNews||20;try{const e=await t.getNewsNoDetails(s);a.json(e)}catch(e){r(a,e)}})),s.get("/anime-info",a,(async(e,a)=>{try{const{"name":s,"getBestMatch":r=!0,"type":n="anime"}=e.query,i={"type":["anime","manga"],"getBestMatch":["true","false"]};if(!s)return a.status(400).json({"error":"Nama anime harus disediakan dalam query."});if(!i.type.includes(n))return a.status(400).json({"error":"Tipe harus berupa anime atau manga."});if(!i.getBestMatch.includes(r.toString()))return a.status(400).json({"error":"getBestMatch harus true atau false."});const o=await t.getInfoFromName(s,"true"===r,n);a.json(o)}catch(e){console.error(e),a.status(500).json({"error":"Terjadi kesalahan dalam server."})}})),s.get("/anime-info",a,(async(e,a)=>{try{const{"url":s}=e.query;if(!s)throw new Error("URL parameter is missing");const r=await t.getInfoFromURL(s);a.json(r)}catch(e){r(a,e)}})),s.get("/episodes",a,(async(e,a)=>{try{const{"animeName":s,"animeId":r}=e.query;if(!s)return void a.status(400).send("Anime name is required.");let n;n=r?await t.getEpisodesList({"name":s,"id":r}):await t.getEpisodesList(s),a.json(n)}catch(e){r(a,e)}})),s.get("/reviews",a,(async(e,a)=>{try{const{"name":s}=e.query;if(!s)return a.status(400).json({"error":"Parameter name is required."});const r=await t.getReviewsList({"name":s});a.json(r)}catch(e){r(a,e)}})),s.get("/recommendations",a,(async(e,a)=>{try{const s=e.query.name,r=e.query.id;let n;if(r)n=await t.getRecommendationsList({"name":s,"id":r});else{if(!s)return a.status(400).json({"error":"Missing anime name or ID"});n=await t.getRecommendationsList(s)}a.json(n)}catch(e){r(a,e)}})),s.get("/stats",a,(async(e,a)=>{try{const s=e.query.name,r=e.query.id;let n;if(r)n=await t.getStats({"name":s,"id":r});else{if(!s)return a.status(400).json({"error":"Missing anime name or ID"});n=await t.getStats(s)}a.json(n)}catch(e){r(a,e)}})),s.get("/pictures",a,(async(e,a)=>{try{const s=e.query.name,r=e.query.id;let n;if(r)n=await t.getPictures({"name":s,"id":r});else{if(!s)return a.status(400).json({"error":"Missing anime name or ID"});n=await t.getPictures(s)}a.json(n)}catch(e){r(a,e)}})),s.get("/user",a,(async(e,a)=>{try{const e=await t.getUser("Kame-nos");a.json(e)}catch(e){r(a,e)}}));export default s;