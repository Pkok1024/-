import e from"express";import r from"bcryptjs";import t from"validator";import i from"jsonwebtoken";import o from"../models/user.js";import n from"nodemailer";const a=e.Router();a.get("/auth/register",(async function(e,a){try{const{"email":s,"password":l,"username":f,"apiKey":c}=e.query;if(!s||!t.isEmail(s))return a.status(400).json({"error":"Valid email is required."});if(!l||!t.isLength(l,{"min":6}))return a.status(400).json({"error":"Password must be at least 6 characters long."});if(!f||!t.isLength(f,{"min":3}))return a.status(400).json({"error":"Username must be at least 3 characters long."});if(!c)return a.status(400).json({"error":"API key is required."});if(await o.findOne({"email":s}))return a.status(400).json({"error":"User with this email already exists."});const d=await o.findOne({"apiKey":c});if(d&&d.apiKey===c)return a.status(400).json({"error":"User with this apiKey already exists."});const p=10,u=await r.hash(l,p),m=new o({"apiKey":c,"email":s,"password":u,"username":f});await m.save();const y=i.sign({"email":s},"Konbanwa",{"expiresIn":"15m"}),g=`${e.protocol}://${e.get("host")}/verify/${y}`;await async function(e,r){const t=n.createTransport({"service":"gmail","auth":{"user":"lzaky404@gmail.com","pass":"kqfsqrqrdigiaicr"}}),i={"from":'"M.U.F.A.R." <admin@onlasdan.tech>',"to":e,"subject":"Account Verification","html":`\n    <div style="position: relative; background-color: #333333; padding: 20px; font-family: Arial, Helvetica, sans-serif; border-radius: 10px;">\n      <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; opacity: 0.5; border-radius: 10px;">\n        <img src="https://telegra.ph/file/493b3e4aee89e29eae36c.jpg" alt="Background" style="width: 100%; height: 100%; object-fit: cover; border-radius: 10px;">\n      </div>\n      <div style="position: relative; z-index: 1;">\n        <div style="display: flex; justify-content: center; margin-bottom: 20px;">\n          <img src="https://telegra.ph/file/493b3e4aee89e29eae36c.jpg" alt="Logo" width="100" height="100" style="border-radius: 50%;">\n        </div>\n        <h2 style="font-size: 24px; text-align: center; color: #ffffff;">Please verify your email address to access your account:</h2>\n        <div style="text-align: center;">\n          <a href="${r}" style="background-color: #007bff; color: white; padding: 10px 20px; font-size: 18px; text-decoration: none; display: inline-block; border-radius: 5px;">Verify Email Address</a>\n        </div>\n        <p style="font-size: 16px; text-align: center; color: #ffffff; margin-top: 20px;">If the button above doesn't work, you can use the following link:</p>\n        <p style="font-size: 16px; text-align: center; color: #ffffff;"><a href="${r}" style="color: #007bff; text-decoration: none;">click here if the button above doesn't work</a></p>\n        <p style="font-size: 14px; text-align: center; color: #ffffff;">This verification link will expire in 14 minute.</p>\n        <p style="font-size: 14px; text-align: center; color: #ffffff;">Thank you,</p>\n        <p style="font-size: 14px; text-align: center; color: #ffffff;">NoxVenenum autor .M.U.F.A.R.</p>\n      </div>\n    </div>\n  `};try{await t.sendMail(i)}catch(e){console.error("Error sending verification email:",e)}}(s,g),a.send("Check email for verification")}catch(e){console.error("Error registering user:",e),a.status(500).json({"error":"Internal Server Error"})}})),a.get("/auth/profile",(async function(e,t){try{const{"email":i,"password":n}=e.query,a=await o.findOne({"email":i});if(!a||!await r.compare(n,a.password))return t.status(400).json({"error":"Invalid email or password."});t.json({"email":a.email,"username":a.username,"limit":a.limit,"status":a.status,"apiKey":a.apiKey,"isVerified":a.isVerified})}catch(e){console.error("Error logging in:",e),t.status(500).json({"error":"Internal Server Error"})}})),a.get("/cekey",(async function(e,r){const{"key":t}=e.query,i=await o.findOne({"apiKey":t});if(!i)return r.status(400).json({"error":"Invalid API key."});r.json({"limit":i.limit})}));export default a;